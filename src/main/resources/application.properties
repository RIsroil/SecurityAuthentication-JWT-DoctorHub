spring.application.name=demo

spring.datasource.url=jdbc:postgresql://localhost:5432/demo?sslmode=disable
# Configure using environment variable SPRING_DATASOURCE_USERNAME or other externalized configuration
# spring.datasource.username=postgres
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:}
# Configure using environment variable SPRING_DATASOURCE_PASSWORD or other externalized configuration
# spring.datasource.password=postgres
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:}
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# It's recommended to use a database migration tool like Flyway or Liquibase for managing schema changes in production.
# 'validate' checks the schema against entities, 'none' does nothing. 'update' is risky for production.
spring.jpa.hibernate.ddl-auto=validate
# Disable SQL logging in production for performance and to avoid exposing sensitive information.
spring.jpa.show-sql=false

server.port=9091

# Consider using HTTPS for the MinIO endpoint in production
# Example for env var: minio.endpoint=${MINIO_ENDPOINT:http://localhost:9000}
minio.endpoint=http://217.114.3.161:9000
# Configure using environment variable MINIO_ACCESS_KEY or other externalized configuration
# minio.access-key=minioadmin
minio.access-key=${MINIO_ACCESS_KEY:}
# Configure using environment variable MINIO_SECRET_KEY or other externalized configuration
# minio.secret-key=minioadmin
minio.secret-key=${MINIO_SECRET_KEY:}
minio.bucket-name=certificate

# Current multipart file size limits are very large (10GB).
# Review and adjust these values to appropriate limits based on your application's specific requirements
# to prevent potential abuse or performance issues.
spring.servlet.multipart.max-file-size= 10000MB
spring.servlet.multipart.max-request-size= 10000MB

server.max-http-request-header-size= 16KB